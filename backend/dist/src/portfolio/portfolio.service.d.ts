import { PrismaService } from 'src/prisma/prisma.service';
import { BlogPostDTO, CertificateDTO, JobDTO, WarehousemanDTO } from './dto/create-portfolio.dto';
import { CreateSkillDTO } from './dto/create-skill.dto';
import { CreateWorkExperienceDTO } from './dto/create-workexperience.dto';
import { UpdateSkillDTO, UpdateWarehousemanDTO } from './dto/update-portfolio.dto';
import { UpdateWorkExperienceDTO } from './dto/update-workexperience.dto';
export declare class PortfolioService {
    private prisma;
    constructor(prisma: PrismaService);
    createWarehouseman(WarehousemanData: WarehousemanDTO): Promise<{
        fullName: string;
        position: string | null;
        email: string | null;
        phone: string | null;
        profBackground: string | null;
        technologyFocus: string | null;
        experienceYears: string | null;
        managedProducts: string | null;
        solvedLogistics: string | null;
        efficiencyRate: string | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    getWarehousemanProfile(): Promise<{
        fullName: string;
        position: string | null;
        email: string | null;
        phone: string | null;
        profBackground: string | null;
        technologyFocus: string | null;
        experienceYears: string | null;
        managedProducts: string | null;
        solvedLogistics: string | null;
        efficiencyRate: string | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }[]>;
    getWarehousemanById(id: string): Promise<{
        fullName: string;
        position: string | null;
        email: string | null;
        phone: string | null;
        profBackground: string | null;
        technologyFocus: string | null;
        experienceYears: string | null;
        managedProducts: string | null;
        solvedLogistics: string | null;
        efficiencyRate: string | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    } | null>;
    updateWarehouseman(id: string, updateWarehousemanData: UpdateWarehousemanDTO): Promise<{
        fullName: string;
        position: string | null;
        email: string | null;
        phone: string | null;
        profBackground: string | null;
        technologyFocus: string | null;
        experienceYears: string | null;
        managedProducts: string | null;
        solvedLogistics: string | null;
        efficiencyRate: string | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    createWorkExperience(createWorkExperienceData: CreateWorkExperienceDTO): Promise<{
        position: string;
        company: string;
        period: string;
        description: string;
        location: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    getWorkExperienceById(id: string): Promise<{
        position: string;
        company: string;
        period: string;
        description: string;
        location: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    } | null>;
    getAllWorkExperiences(): Promise<{
        position: string;
        company: string;
        period: string;
        description: string;
        location: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }[]>;
    updateWorkExperience(id: string, updateWorkExperienceData: UpdateWorkExperienceDTO): Promise<{
        position: string;
        company: string;
        period: string;
        description: string;
        location: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    deleteWorkExperience(id: string): Promise<{
        position: string;
        company: string;
        period: string;
        description: string;
        location: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    createSkill(createSkillData: CreateSkillDTO): Promise<{
        name: string;
        level: string;
        category: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    getSkillById(id: string): Promise<{
        name: string;
        level: string;
        category: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    } | null>;
    getAllSkills(): Promise<{
        name: string;
        level: string;
        category: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }[]>;
    updateSkill(id: string, updateSkillData: UpdateSkillDTO): Promise<{
        name: string;
        level: string;
        category: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    deleteSkill(id: string): Promise<{
        name: string;
        level: string;
        category: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    createCertificate(certificateData: CertificateDTO, images: Express.Multer.File): Promise<{
        name: string;
        date: string;
        organization: string;
        image: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    updateCertificate(id: string, certificateData: CertificateDTO, image: Express.Multer.File): Promise<{
        name: string;
        date: string;
        organization: string;
        image: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    getCertificateById(id: string): Promise<{
        name: string;
        date: string;
        organization: string;
        image: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    } | null>;
    getAllCertificates(): Promise<{
        name: string;
        date: string;
        organization: string;
        image: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }[]>;
    deleteCertificate(id: string): Promise<{
        name: string;
        date: string;
        organization: string;
        image: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    createBlogPost(BlogPostData: BlogPostDTO, image: Express.Multer.File): Promise<{
        category: string;
        description: string;
        image: string;
        author: string;
        title: string;
        readTime: string;
        active: boolean;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    updateBlog(id: string, BlogPostData: BlogPostDTO, image: Express.Multer.File): Promise<{
        category: string;
        description: string;
        image: string;
        author: string;
        title: string;
        readTime: string;
        active: boolean;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    toggleBlogActiveStatus(id: string, isActive: boolean): Promise<{
        category: string;
        description: string;
        image: string;
        author: string;
        title: string;
        readTime: string;
        active: boolean;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    getAllBlogs(): Promise<{
        category: string;
        description: string;
        image: string;
        author: string;
        title: string;
        readTime: string;
        active: boolean;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }[]>;
    getBlogById(id: string): Promise<{
        category: string;
        description: string;
        image: string;
        author: string;
        title: string;
        readTime: string;
        active: boolean;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    } | null>;
    deleteBlog(id: string): Promise<{
        category: string;
        description: string;
        image: string;
        author: string;
        title: string;
        readTime: string;
        active: boolean;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    createVacancy(jobData: JobDTO): Promise<{
        position: string;
        company: string;
        description: string;
        city: string;
        salary: string;
        deadline: string;
        link: string;
        work_schedule: string;
        priority: string;
        requirements: string;
        status: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    updateVacancy(id: string, jobData: JobDTO): Promise<{
        position: string;
        company: string;
        description: string;
        city: string;
        salary: string;
        deadline: string;
        link: string;
        work_schedule: string;
        priority: string;
        requirements: string;
        status: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    searchVacancies(city?: string): Promise<{
        position: string;
        company: string;
        description: string;
        city: string;
        salary: string;
        deadline: string;
        link: string;
        work_schedule: string;
        priority: string;
        requirements: string;
        status: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }[]>;
    getVacancyById(id: string): Promise<{
        position: string;
        company: string;
        description: string;
        city: string;
        salary: string;
        deadline: string;
        link: string;
        work_schedule: string;
        priority: string;
        requirements: string;
        status: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    } | null>;
    deleteVacancy(id: string): Promise<{
        position: string;
        company: string;
        description: string;
        city: string;
        salary: string;
        deadline: string;
        link: string;
        work_schedule: string;
        priority: string;
        requirements: string;
        status: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
}
